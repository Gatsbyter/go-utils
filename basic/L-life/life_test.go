package L_life

import (
	"testing"
)

// go的变量可分为下面三类
// 1、全局变量：它的生命周期和整个程序的运行周期是一致的
// 2、局部变量：它的生命周期则是动态的，从创建这个变量的声明语句开始，到这个变量不再被引用为止（⚠️注意不是函数结束）
// 3、形式参数和函数返回值：它们都属于局部变量，在函数被调用的时候创建，函数调用结束后被销毁

func TestLife(t *testing.T) {
	f()
	g()
	t.Log(global)
}

var global *int

// 这里的变量 x 必须在堆上分配，因为它在函数退出后依然可以通过包一级的 global 变量找到，虽然它是在函数内部定义的
// 用Go语言的术语说，这个局部变量 x 从函数 f 中逃逸了
func f() {
	var x int
	x = 1
	global = &x
}

// 当函数 g 返回时，变量 *y 不再被使用，也就是说可以马上被回收的
// *y 并没有从函数 g 中逃逸，编译器可以选择在栈上分配 *y 的存储空间，也可以选择在堆上分配
// 然后由Go语言的 GC（垃圾回收机制）回收这个变量的内存空间
func g() {
	y := new(int)
	*y = 1
}
